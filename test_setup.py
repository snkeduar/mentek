# test_setup.py
"""
Script para probar la configuraci√≥n inicial del proyecto.
Ejecuta: python test_setup.py
"""

import asyncio
import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent))

async def test_configuration():
    """Prueba la configuraci√≥n de la aplicaci√≥n."""
    print("üîß Probando configuraci√≥n...")
    
    try:
        from app.core.config import settings
        print(f"‚úÖ Configuraci√≥n cargada correctamente")
        print(f"   - Proyecto: {settings.PROJECT_NAME}")
        print(f"   - Versi√≥n: {settings.PROJECT_VERSION}")
        print(f"   - Entorno: {settings.ENVIRONMENT}")
        print(f"   - Debug: {settings.DEBUG}")
        return True
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False


async def test_database_connection():
    """Prueba la conexi√≥n a la base de datos."""
    print("\nüóÑÔ∏è  Probando conexi√≥n a base de datos...")
    
    try:
        from app.core.database import check_database_connection
        
        is_connected = await check_database_connection()
        if is_connected:
            print("‚úÖ Conexi√≥n a base de datos exitosa")
            return True
        else:
            print("‚ùå No se pudo conectar a la base de datos")
            print("   Verifica que PostgreSQL est√© ejecut√°ndose y las credenciales sean correctas")
            return False
    except Exception as e:
        print(f"‚ùå Error probando base de datos: {e}")
        return False


async def test_stored_procedures():
    """Prueba la ejecuci√≥n de stored procedures."""
    print("\nüîß Probando stored procedures...")
    
    try:
        from app.core.database import execute_stored_procedure
        
        # Probar listado de usuarios
        result = await execute_stored_procedure("sp_list_users", {
            "p_page": 1,
            "p_page_size": 5
        })
        
        print(f"‚úÖ Stored procedure ejecutado correctamente")
        print(f"   - Registros encontrados: {len(result)}")
        
        if result:
            first_record = result[0]
            print(f"   - Campos en primer registro: {list(first_record.keys())}")
        
        return True
    except Exception as e:
        print(f"‚ùå Error ejecutando stored procedure: {e}")
        print("   Aseg√∫rate de que los stored procedures est√©n creados en la base de datos")
        return False


async def test_security_functions():
    """Prueba las funciones de seguridad."""
    print("\nüîê Probando funciones de seguridad...")
    
    try:
        from app.core.security import (
            get_password_hash, 
            verify_password, 
            create_access_token,
            verify_access_token,
            validate_password_strength
        )
        
        # Probar hash de contrase√±a
        password = "TestPassword123!"
        hashed = get_password_hash(password)
        is_valid = verify_password(password, hashed)
        
        if not is_valid:
            print("‚ùå Error en hash/verificaci√≥n de contrase√±a")
            return False
        
        print("‚úÖ Hash y verificaci√≥n de contrase√±a funcionando")
        
        # Probar JWT
        token_data = {"sub": "123", "username": "test_user"}
        token = create_access_token(token_data)
        decoded = verify_access_token(token)
        
        if not decoded or decoded.get("sub") != "123":
            print("‚ùå Error en creaci√≥n/verificaci√≥n de JWT")
            return False
        
        print("‚úÖ Creaci√≥n y verificaci√≥n de JWT funcionando")
        
        # Probar validaci√≥n de contrase√±a
        validation = validate_password_strength("WeakPass")
        if validation["valid"]:
            print("‚ùå Error en validaci√≥n de contrase√±a d√©bil")
            return False
        
        validation = validate_password_strength("StrongPassword123!")
        if not validation["valid"]:
            print("‚ùå Error en validaci√≥n de contrase√±a fuerte")
            return False
        
        print("‚úÖ Validaci√≥n de contrase√±as funcionando")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en funciones de seguridad: {e}")
        return False


async def test_exceptions():
    """Prueba las excepciones personalizadas."""
    print("\n‚ö†Ô∏è  Probando excepciones personalizadas...")
    
    try:
        from app.utils.exceptions import (
            UserNotFoundException, 
            InvalidCredentialsException,
            ValidationException
        )
        
        # Probar que las excepciones se crean correctamente
        exc1 = UserNotFoundException("test@example.com")
        exc2 = InvalidCredentialsException()
        exc3 = ValidationException("email", "formato inv√°lido")
        
        print("‚úÖ Excepciones personalizadas funcionando")
        print(f"   - UserNotFoundException: {exc1.detail}")
        print(f"   - InvalidCredentialsException: {exc2.detail}")
        print(f"   - ValidationException: {exc3.detail}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en excepciones: {e}")
        return False


async def test_fastapi_app():
    """Prueba que la aplicaci√≥n FastAPI se crea correctamente."""
    print("\nüöÄ Probando aplicaci√≥n FastAPI...")
    
    try:
        from app.main import app
        
        # Verificar que la app se crea
        if app is None:
            print("‚ùå La aplicaci√≥n FastAPI no se cre√≥ correctamente")
            return False
        
        print("‚úÖ Aplicaci√≥n FastAPI creada correctamente")
        print(f"   - T√≠tulo: {app.title}")
        print(f"   - Versi√≥n: {app.version}")
        
        # Verificar rutas b√°sicas
        routes = [route.path for route in app.routes]
        expected_routes = ["/", "/health", "/info"]
        
        for route in expected_routes:
            if route not in routes:
                print(f"‚ùå Ruta faltante: {route}")
                return False
        
        print("‚úÖ Rutas b√°sicas configuradas correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando aplicaci√≥n FastAPI: {e}")
        return False


async def main():
    """Funci√≥n principal de pruebas."""
    print("üß™ PRUEBAS DE CONFIGURACI√ìN INICIAL")
    print("=" * 50)
    
    tests = [
        ("Configuraci√≥n", test_configuration),
        ("Base de datos", test_database_connection),
        ("Stored procedures", test_stored_procedures),
        ("Seguridad", test_security_functions),
        ("Excepciones", test_exceptions),
        ("FastAPI", test_fastapi_app),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error ejecutando prueba {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! El proyecto est√° configurado correctamente.")
        print("\nPr√≥ximos pasos:")
        print("1. Ejecutar: uvicorn app.main:app --reload")
        print("2. Abrir: http://localhost:8000")
        print("3. Ver documentaci√≥n: http://localhost:8000/docs")
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisa la configuraci√≥n.")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())